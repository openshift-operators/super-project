---
apiVersion: v1
kind: DeploymentConfig
metadata:
  name: "{{ jenkins_service_name }}"
  namespace: "{{ meta.name }}"
spec:
  replicas: 1
  selector:
    name: "{{ jenkins_service_name }}"
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: "{{ jenkins_service_name }}"
    spec:
      containers:
        - name: jenkins
{% if jenkins_env | bool == true %}
          envFrom:
            - configMapRef:
                name: jenkins-env
{% endif %}
          env:
            - name: OPENSHIFT_ENABLE_OAUTH
              value: "{{ enable_oauth }}"

            - name: OPENSHIFT_ENABLE_REDIRECT_PROMPT
              value: "true"

            - name: DISABLE_ADMINISTRATIVE_MONITORS
              value: "{{ disable_administrative_monitors }}"

            - name: KUBERNETES_MASTER
              value: "https://{{ k8s_master_host }}:{{ k8s_master_port }}"

            - name: KUBERNETES_TRUST_CERTIFICATES
              value: "true"

            - name: JENKINS_SERVICE_NAME
              value: "{{ jenkins_service_name }}"

            - name: JNLP_SERVICE_NAME
              value: "{{ jnlp_service_name }}"

            - name: ENABLE_FATAL_ERROR_LOG_FILE
              value: "{{ enable_fatal_error_log_file }}"
          image: "{{ jenkins_image }}"

          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /login
              port: 8080
            initialDelaySeconds: 420
            periodSeconds: 360
            timeoutSeconds: 240
          readinessProbe:
            httpGet:
              path: /login
              port: 8080
            initialDelaySeconds: 3
            timeoutSeconds: 240
          resources:
            limits:
              cpu: "{{ jenkins_limit_cpu }}"
              memory: "{{ jenkins_limit_mem }}"
            requests:
              cpu: "{{ jenkins_request_cpu }}"
              memory: "{{ jenkins_request_mem }}"

          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
            - mountPath: /var/lib/jenkins
              name: "{{ jenkins_service_name }}-data"

      dnsPolicy: ClusterFirst
      restartPolicy: Always
      serviceAccountName: "{{ jenkins_service_name }}"
      volumes:
        - name: "{{ jenkins_service_name }}-data"
{% if ephemeral_jenkins | bool == false %}
          persistentVolumeClaim:
            claimName: "{{ jenkins_service_name }}-data"
{% endif %}
{% if ephemeral_jenkins | bool == true %}
          emptyDir: {}
{% endif %}

  triggers:
    - type: ConfigChange
