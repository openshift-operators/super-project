- block:
  - block:
    - k8s_info:
        api_version: v1
        kind: ConfigMap
        name: jenkins-env
        namespace: "{{ meta.name }}"
      register: jks_env_cm

    - name: Create Jenkins ConfigMap with project ENV variables
      k8s:
        state: present
        apply: yes
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: jenkins-env
            namespace: "{{ meta.name }}"
            labels:
              name: jenkins-env
              app: jenkins
          data: {}
      when:  jks_env_cm.resources | length == 0
    when: jenkins_env | bool == true

  - name: Create PVC for Jenkins
    k8s:
      state: present
      namespace: "{{ meta.name }}"
      api_version: "v1"
      definition:
        kind: PersistentVolumeClaim
        metadata:
          name: "{{ jenkins_service_name }}-data"
        spec:
          storageClassName: "{{ jenkins_storage_class_name }}"
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: "{{ jenkins_volume_capacity }}"
    when:  ephemeral_jenkins | bool == false

  - name: Create Jenkins service account
    k8s:
      state: present
      apply: yes
      definition: "{{ lookup('template', 'jenkins-service-account.yaml') | from_yaml }}"


  - name: Role binding for Jenkins service account
    k8s:
      state: present
      apply: yes
      definition:
        apiVersion: authorization.openshift.io/v1
        kind: RoleBinding
        metadata:
          namespace: "{{ meta.name }}"
          name: "{{ jenkins_service_name }}_edit"
        roleRef:
          name: edit
        subjects:
          - kind: ServiceAccount
            name: "{{ jenkins_service_name }}"

  - name: Create Jenkins deploymentconfig
    k8s:
      state: present
      apply: yes
      definition: "{{ lookup('template', 'jenkins-dc.yaml') | from_yaml }}"


  - name: Create Jenkins JNLP kubernetes service
    k8s:
      state: present
      apply: yes
      definition:
          apiVersion: v1
          kind: Service
          metadata:
            namespace: "{{ meta.name }}"
            name: "{{ jnlp_service_name }}"
          spec:
            ports:
              - name: agent
                port: 50000
                protocol: TCP
                targetPort: 50000
            selector:
              name: "{{ jenkins_service_name }}"
            sessionAffinity: None
            type: ClusterIP



  - name: Create Jenkins web interface kubernetes service
    k8s:
      state: present
      apply: yes
      definition:
          apiVersion: v1
          kind: Service
          metadata:
            namespace: "{{ meta.name }}"
            annotations:
              service.alpha.openshift.io/dependencies: '[{"name": ""{{ jenkins_service_name }}"", "namespace": "", "kind": "Service"}]'
              service.openshift.io/infrastructure: "true"
            name:  "{{ jenkins_service_name }}"
          spec:
            ports:
              - name: web
                nodePort: 0
                port: 80
                protocol: TCP
                targetPort: 8080
            selector:
              name: "{{ jenkins_service_name }}"
            sessionAffinity: None
            type: ClusterIP


  - name: Create route for Jenkins UI
    k8s:
      state: present
      apply: yes
      definition:
            apiVersion: v1
            kind: Route
            metadata:
              namespace: "{{ meta.name }}"
              annotations:
                haproxy.router.openshift.io/timeout: 4m
              name: "{{ jenkins_service_name }}"
            spec:
              tls:
                insecureEdgeTerminationPolicy: Redirect
                termination: edge
              to:
                kind: Service
                name: "{{ jenkins_service_name }}"



  when: with_jenkins | bool == true





